// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file proto/demeter/ops/v1alpha/usage.proto (package demeter.ops.v1alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message demeter.ops.v1alpha.UsageReport
 */
export class UsageReport extends Message<UsageReport> {
  /**
   * @generated from field: string resource_id = 1;
   */
  resourceId = "";

  /**
   * @generated from field: string resource_name = 2;
   */
  resourceName = "";

  /**
   * @generated from field: string resource_kind = 3;
   */
  resourceKind = "";

  /**
   * @generated from field: string resource_spec = 4;
   */
  resourceSpec = "";

  /**
   * @generated from field: int64 units = 5;
   */
  units = protoInt64.zero;

  /**
   * @generated from field: string tier = 7;
   */
  tier = "";

  /**
   * @generated from field: string period = 8;
   */
  period = "";

  /**
   * @generated from field: optional double units_cost = 9;
   */
  unitsCost?: number;

  /**
   * @generated from field: optional double minimum_cost = 10;
   */
  minimumCost?: number;

  constructor(data?: PartialMessage<UsageReport>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.UsageReport";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "resource_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "resource_kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "resource_spec", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "units", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "tier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "period", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "units_cost", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 10, name: "minimum_cost", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UsageReport {
    return new UsageReport().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UsageReport {
    return new UsageReport().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UsageReport {
    return new UsageReport().fromJsonString(jsonString, options);
  }

  static equals(a: UsageReport | PlainMessage<UsageReport> | undefined, b: UsageReport | PlainMessage<UsageReport> | undefined): boolean {
    return proto3.util.equals(UsageReport, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.FetchUsageReportRequest
 */
export class FetchUsageReportRequest extends Message<FetchUsageReportRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * @generated from field: optional uint32 page = 2;
   */
  page?: number;

  /**
   * @generated from field: optional uint32 page_size = 3;
   */
  pageSize?: number;

  /**
   * @generated from field: optional string cluster_id = 4;
   */
  clusterId?: string;

  constructor(data?: PartialMessage<FetchUsageReportRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.FetchUsageReportRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 3, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 4, name: "cluster_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchUsageReportRequest {
    return new FetchUsageReportRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchUsageReportRequest {
    return new FetchUsageReportRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchUsageReportRequest {
    return new FetchUsageReportRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FetchUsageReportRequest | PlainMessage<FetchUsageReportRequest> | undefined, b: FetchUsageReportRequest | PlainMessage<FetchUsageReportRequest> | undefined): boolean {
    return proto3.util.equals(FetchUsageReportRequest, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.FetchUsageReportResponse
 */
export class FetchUsageReportResponse extends Message<FetchUsageReportResponse> {
  /**
   * @generated from field: repeated demeter.ops.v1alpha.UsageReport records = 1;
   */
  records: UsageReport[] = [];

  constructor(data?: PartialMessage<FetchUsageReportResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.FetchUsageReportResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "records", kind: "message", T: UsageReport, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchUsageReportResponse {
    return new FetchUsageReportResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchUsageReportResponse {
    return new FetchUsageReportResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchUsageReportResponse {
    return new FetchUsageReportResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FetchUsageReportResponse | PlainMessage<FetchUsageReportResponse> | undefined, b: FetchUsageReportResponse | PlainMessage<FetchUsageReportResponse> | undefined): boolean {
    return proto3.util.equals(FetchUsageReportResponse, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.FetchUsageClusterRequest
 */
export class FetchUsageClusterRequest extends Message<FetchUsageClusterRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * @generated from field: optional uint32 page = 2;
   */
  page?: number;

  /**
   * @generated from field: optional uint32 page_size = 3;
   */
  pageSize?: number;

  constructor(data?: PartialMessage<FetchUsageClusterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.FetchUsageClusterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 3, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchUsageClusterRequest {
    return new FetchUsageClusterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchUsageClusterRequest {
    return new FetchUsageClusterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchUsageClusterRequest {
    return new FetchUsageClusterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FetchUsageClusterRequest | PlainMessage<FetchUsageClusterRequest> | undefined, b: FetchUsageClusterRequest | PlainMessage<FetchUsageClusterRequest> | undefined): boolean {
    return proto3.util.equals(FetchUsageClusterRequest, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.FetchUsageClusterResponse
 */
export class FetchUsageClusterResponse extends Message<FetchUsageClusterResponse> {
  /**
   * @generated from field: repeated string clusters = 1;
   */
  clusters: string[] = [];

  constructor(data?: PartialMessage<FetchUsageClusterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.FetchUsageClusterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clusters", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchUsageClusterResponse {
    return new FetchUsageClusterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchUsageClusterResponse {
    return new FetchUsageClusterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchUsageClusterResponse {
    return new FetchUsageClusterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FetchUsageClusterResponse | PlainMessage<FetchUsageClusterResponse> | undefined, b: FetchUsageClusterResponse | PlainMessage<FetchUsageClusterResponse> | undefined): boolean {
    return proto3.util.equals(FetchUsageClusterResponse, a, b);
  }
}

