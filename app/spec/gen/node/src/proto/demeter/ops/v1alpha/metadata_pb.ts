// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file proto/demeter/ops/v1alpha/metadata.proto (package demeter.ops.v1alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message demeter.ops.v1alpha.Metadata
 */
export class Metadata extends Message<Metadata> {
  /**
   * @generated from field: string options = 1;
   */
  options = "";

  /**
   * @generated from field: string crd = 2;
   */
  crd = "";

  constructor(data?: PartialMessage<Metadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.Metadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "options", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "crd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Metadata {
    return new Metadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Metadata {
    return new Metadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Metadata {
    return new Metadata().fromJsonString(jsonString, options);
  }

  static equals(a: Metadata | PlainMessage<Metadata> | undefined, b: Metadata | PlainMessage<Metadata> | undefined): boolean {
    return proto3.util.equals(Metadata, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.FetchMetadataRequest
 */
export class FetchMetadataRequest extends Message<FetchMetadataRequest> {
  constructor(data?: PartialMessage<FetchMetadataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.FetchMetadataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchMetadataRequest {
    return new FetchMetadataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchMetadataRequest {
    return new FetchMetadataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchMetadataRequest {
    return new FetchMetadataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FetchMetadataRequest | PlainMessage<FetchMetadataRequest> | undefined, b: FetchMetadataRequest | PlainMessage<FetchMetadataRequest> | undefined): boolean {
    return proto3.util.equals(FetchMetadataRequest, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.FetchMetadataResponse
 */
export class FetchMetadataResponse extends Message<FetchMetadataResponse> {
  /**
   * @generated from field: repeated demeter.ops.v1alpha.Metadata records = 1;
   */
  records: Metadata[] = [];

  constructor(data?: PartialMessage<FetchMetadataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.FetchMetadataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "records", kind: "message", T: Metadata, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchMetadataResponse {
    return new FetchMetadataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchMetadataResponse {
    return new FetchMetadataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchMetadataResponse {
    return new FetchMetadataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FetchMetadataResponse | PlainMessage<FetchMetadataResponse> | undefined, b: FetchMetadataResponse | PlainMessage<FetchMetadataResponse> | undefined): boolean {
    return proto3.util.equals(FetchMetadataResponse, a, b);
  }
}

