// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file proto/demeter/ops/v1alpha/project.proto (package demeter.ops.v1alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message demeter.ops.v1alpha.Project
 */
export class Project extends Message<Project> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string namespace = 3;
   */
  namespace = "";

  /**
   * @generated from field: string status = 4;
   */
  status = "";

  /**
   * @generated from field: string billing_provider = 5;
   */
  billingProvider = "";

  /**
   * @generated from field: string billing_provider_id = 6;
   */
  billingProviderId = "";

  /**
   * @generated from field: optional string billing_subscription_id = 7;
   */
  billingSubscriptionId?: string;

  /**
   * @generated from field: string created_at = 8;
   */
  createdAt = "";

  /**
   * @generated from field: string updated_at = 9;
   */
  updatedAt = "";

  constructor(data?: PartialMessage<Project>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.Project";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "billing_provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "billing_provider_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "billing_subscription_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Project {
    return new Project().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJsonString(jsonString, options);
  }

  static equals(a: Project | PlainMessage<Project> | undefined, b: Project | PlainMessage<Project> | undefined): boolean {
    return proto3.util.equals(Project, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.CreateProjectRequest
 */
export class CreateProjectRequest extends Message<CreateProjectRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<CreateProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.CreateProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateProjectRequest {
    return new CreateProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateProjectRequest {
    return new CreateProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateProjectRequest {
    return new CreateProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateProjectRequest | PlainMessage<CreateProjectRequest> | undefined, b: CreateProjectRequest | PlainMessage<CreateProjectRequest> | undefined): boolean {
    return proto3.util.equals(CreateProjectRequest, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.CreateProjectResponse
 */
export class CreateProjectResponse extends Message<CreateProjectResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string namespace = 3;
   */
  namespace = "";

  constructor(data?: PartialMessage<CreateProjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.CreateProjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateProjectResponse {
    return new CreateProjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateProjectResponse {
    return new CreateProjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateProjectResponse {
    return new CreateProjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateProjectResponse | PlainMessage<CreateProjectResponse> | undefined, b: CreateProjectResponse | PlainMessage<CreateProjectResponse> | undefined): boolean {
    return proto3.util.equals(CreateProjectResponse, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.UpdateProjectRequest
 */
export class UpdateProjectRequest extends Message<UpdateProjectRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<UpdateProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.UpdateProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateProjectRequest {
    return new UpdateProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateProjectRequest {
    return new UpdateProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateProjectRequest {
    return new UpdateProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateProjectRequest | PlainMessage<UpdateProjectRequest> | undefined, b: UpdateProjectRequest | PlainMessage<UpdateProjectRequest> | undefined): boolean {
    return proto3.util.equals(UpdateProjectRequest, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.UpdateProjectResponse
 */
export class UpdateProjectResponse extends Message<UpdateProjectResponse> {
  /**
   * @generated from field: demeter.ops.v1alpha.Project updated = 1;
   */
  updated?: Project;

  constructor(data?: PartialMessage<UpdateProjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.UpdateProjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "updated", kind: "message", T: Project },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateProjectResponse {
    return new UpdateProjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateProjectResponse {
    return new UpdateProjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateProjectResponse {
    return new UpdateProjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateProjectResponse | PlainMessage<UpdateProjectResponse> | undefined, b: UpdateProjectResponse | PlainMessage<UpdateProjectResponse> | undefined): boolean {
    return proto3.util.equals(UpdateProjectResponse, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.FetchProjectsRequest
 */
export class FetchProjectsRequest extends Message<FetchProjectsRequest> {
  /**
   * @generated from field: optional uint32 page = 1;
   */
  page?: number;

  /**
   * @generated from field: optional uint32 page_size = 2;
   */
  pageSize?: number;

  constructor(data?: PartialMessage<FetchProjectsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.FetchProjectsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 2, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchProjectsRequest {
    return new FetchProjectsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchProjectsRequest {
    return new FetchProjectsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchProjectsRequest {
    return new FetchProjectsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FetchProjectsRequest | PlainMessage<FetchProjectsRequest> | undefined, b: FetchProjectsRequest | PlainMessage<FetchProjectsRequest> | undefined): boolean {
    return proto3.util.equals(FetchProjectsRequest, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.FetchProjectsResponse
 */
export class FetchProjectsResponse extends Message<FetchProjectsResponse> {
  /**
   * @generated from field: repeated demeter.ops.v1alpha.Project records = 2;
   */
  records: Project[] = [];

  constructor(data?: PartialMessage<FetchProjectsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.FetchProjectsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "records", kind: "message", T: Project, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchProjectsResponse {
    return new FetchProjectsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchProjectsResponse {
    return new FetchProjectsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchProjectsResponse {
    return new FetchProjectsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FetchProjectsResponse | PlainMessage<FetchProjectsResponse> | undefined, b: FetchProjectsResponse | PlainMessage<FetchProjectsResponse> | undefined): boolean {
    return proto3.util.equals(FetchProjectsResponse, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.FetchProjectByIdRequest
 */
export class FetchProjectByIdRequest extends Message<FetchProjectByIdRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<FetchProjectByIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.FetchProjectByIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchProjectByIdRequest {
    return new FetchProjectByIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchProjectByIdRequest {
    return new FetchProjectByIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchProjectByIdRequest {
    return new FetchProjectByIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FetchProjectByIdRequest | PlainMessage<FetchProjectByIdRequest> | undefined, b: FetchProjectByIdRequest | PlainMessage<FetchProjectByIdRequest> | undefined): boolean {
    return proto3.util.equals(FetchProjectByIdRequest, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.FetchProjectByIdResponse
 */
export class FetchProjectByIdResponse extends Message<FetchProjectByIdResponse> {
  /**
   * @generated from field: repeated demeter.ops.v1alpha.Project records = 1;
   */
  records: Project[] = [];

  constructor(data?: PartialMessage<FetchProjectByIdResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.FetchProjectByIdResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "records", kind: "message", T: Project, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchProjectByIdResponse {
    return new FetchProjectByIdResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchProjectByIdResponse {
    return new FetchProjectByIdResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchProjectByIdResponse {
    return new FetchProjectByIdResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FetchProjectByIdResponse | PlainMessage<FetchProjectByIdResponse> | undefined, b: FetchProjectByIdResponse | PlainMessage<FetchProjectByIdResponse> | undefined): boolean {
    return proto3.util.equals(FetchProjectByIdResponse, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.FetchProjectByNamespaceRequest
 */
export class FetchProjectByNamespaceRequest extends Message<FetchProjectByNamespaceRequest> {
  /**
   * @generated from field: string namespace = 1;
   */
  namespace = "";

  constructor(data?: PartialMessage<FetchProjectByNamespaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.FetchProjectByNamespaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchProjectByNamespaceRequest {
    return new FetchProjectByNamespaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchProjectByNamespaceRequest {
    return new FetchProjectByNamespaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchProjectByNamespaceRequest {
    return new FetchProjectByNamespaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FetchProjectByNamespaceRequest | PlainMessage<FetchProjectByNamespaceRequest> | undefined, b: FetchProjectByNamespaceRequest | PlainMessage<FetchProjectByNamespaceRequest> | undefined): boolean {
    return proto3.util.equals(FetchProjectByNamespaceRequest, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.FetchProjectByNamespaceResponse
 */
export class FetchProjectByNamespaceResponse extends Message<FetchProjectByNamespaceResponse> {
  /**
   * @generated from field: repeated demeter.ops.v1alpha.Project records = 1;
   */
  records: Project[] = [];

  constructor(data?: PartialMessage<FetchProjectByNamespaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.FetchProjectByNamespaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "records", kind: "message", T: Project, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchProjectByNamespaceResponse {
    return new FetchProjectByNamespaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchProjectByNamespaceResponse {
    return new FetchProjectByNamespaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchProjectByNamespaceResponse {
    return new FetchProjectByNamespaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FetchProjectByNamespaceResponse | PlainMessage<FetchProjectByNamespaceResponse> | undefined, b: FetchProjectByNamespaceResponse | PlainMessage<FetchProjectByNamespaceResponse> | undefined): boolean {
    return proto3.util.equals(FetchProjectByNamespaceResponse, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.DeleteProjectRequest
 */
export class DeleteProjectRequest extends Message<DeleteProjectRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.DeleteProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteProjectRequest {
    return new DeleteProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteProjectRequest {
    return new DeleteProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteProjectRequest {
    return new DeleteProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteProjectRequest | PlainMessage<DeleteProjectRequest> | undefined, b: DeleteProjectRequest | PlainMessage<DeleteProjectRequest> | undefined): boolean {
    return proto3.util.equals(DeleteProjectRequest, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.DeleteProjectResponse
 */
export class DeleteProjectResponse extends Message<DeleteProjectResponse> {
  constructor(data?: PartialMessage<DeleteProjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.DeleteProjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteProjectResponse {
    return new DeleteProjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteProjectResponse {
    return new DeleteProjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteProjectResponse {
    return new DeleteProjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteProjectResponse | PlainMessage<DeleteProjectResponse> | undefined, b: DeleteProjectResponse | PlainMessage<DeleteProjectResponse> | undefined): boolean {
    return proto3.util.equals(DeleteProjectResponse, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.ProjectSecret
 */
export class ProjectSecret extends Message<ProjectSecret> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string project_id = 2;
   */
  projectId = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string created_at = 4;
   */
  createdAt = "";

  constructor(data?: PartialMessage<ProjectSecret>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.ProjectSecret";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectSecret {
    return new ProjectSecret().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectSecret {
    return new ProjectSecret().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectSecret {
    return new ProjectSecret().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectSecret | PlainMessage<ProjectSecret> | undefined, b: ProjectSecret | PlainMessage<ProjectSecret> | undefined): boolean {
    return proto3.util.equals(ProjectSecret, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.CreateProjectSecretRequest
 */
export class CreateProjectSecretRequest extends Message<CreateProjectSecretRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string project_id = 2;
   */
  projectId = "";

  constructor(data?: PartialMessage<CreateProjectSecretRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.CreateProjectSecretRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateProjectSecretRequest {
    return new CreateProjectSecretRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateProjectSecretRequest {
    return new CreateProjectSecretRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateProjectSecretRequest {
    return new CreateProjectSecretRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateProjectSecretRequest | PlainMessage<CreateProjectSecretRequest> | undefined, b: CreateProjectSecretRequest | PlainMessage<CreateProjectSecretRequest> | undefined): boolean {
    return proto3.util.equals(CreateProjectSecretRequest, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.CreateProjectSecretResponse
 */
export class CreateProjectSecretResponse extends Message<CreateProjectSecretResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string key = 3;
   */
  key = "";

  constructor(data?: PartialMessage<CreateProjectSecretResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.CreateProjectSecretResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateProjectSecretResponse {
    return new CreateProjectSecretResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateProjectSecretResponse {
    return new CreateProjectSecretResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateProjectSecretResponse {
    return new CreateProjectSecretResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateProjectSecretResponse | PlainMessage<CreateProjectSecretResponse> | undefined, b: CreateProjectSecretResponse | PlainMessage<CreateProjectSecretResponse> | undefined): boolean {
    return proto3.util.equals(CreateProjectSecretResponse, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.FetchProjectSecretsRequest
 */
export class FetchProjectSecretsRequest extends Message<FetchProjectSecretsRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  constructor(data?: PartialMessage<FetchProjectSecretsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.FetchProjectSecretsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchProjectSecretsRequest {
    return new FetchProjectSecretsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchProjectSecretsRequest {
    return new FetchProjectSecretsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchProjectSecretsRequest {
    return new FetchProjectSecretsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FetchProjectSecretsRequest | PlainMessage<FetchProjectSecretsRequest> | undefined, b: FetchProjectSecretsRequest | PlainMessage<FetchProjectSecretsRequest> | undefined): boolean {
    return proto3.util.equals(FetchProjectSecretsRequest, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.FetchProjectSecretsResponse
 */
export class FetchProjectSecretsResponse extends Message<FetchProjectSecretsResponse> {
  /**
   * @generated from field: repeated demeter.ops.v1alpha.ProjectSecret records = 2;
   */
  records: ProjectSecret[] = [];

  constructor(data?: PartialMessage<FetchProjectSecretsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.FetchProjectSecretsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "records", kind: "message", T: ProjectSecret, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchProjectSecretsResponse {
    return new FetchProjectSecretsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchProjectSecretsResponse {
    return new FetchProjectSecretsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchProjectSecretsResponse {
    return new FetchProjectSecretsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FetchProjectSecretsResponse | PlainMessage<FetchProjectSecretsResponse> | undefined, b: FetchProjectSecretsResponse | PlainMessage<FetchProjectSecretsResponse> | undefined): boolean {
    return proto3.util.equals(FetchProjectSecretsResponse, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.DeleteProjectSecretRequest
 */
export class DeleteProjectSecretRequest extends Message<DeleteProjectSecretRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteProjectSecretRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.DeleteProjectSecretRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteProjectSecretRequest {
    return new DeleteProjectSecretRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteProjectSecretRequest {
    return new DeleteProjectSecretRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteProjectSecretRequest {
    return new DeleteProjectSecretRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteProjectSecretRequest | PlainMessage<DeleteProjectSecretRequest> | undefined, b: DeleteProjectSecretRequest | PlainMessage<DeleteProjectSecretRequest> | undefined): boolean {
    return proto3.util.equals(DeleteProjectSecretRequest, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.DeleteProjectSecretResponse
 */
export class DeleteProjectSecretResponse extends Message<DeleteProjectSecretResponse> {
  constructor(data?: PartialMessage<DeleteProjectSecretResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.DeleteProjectSecretResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteProjectSecretResponse {
    return new DeleteProjectSecretResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteProjectSecretResponse {
    return new DeleteProjectSecretResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteProjectSecretResponse {
    return new DeleteProjectSecretResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteProjectSecretResponse | PlainMessage<DeleteProjectSecretResponse> | undefined, b: DeleteProjectSecretResponse | PlainMessage<DeleteProjectSecretResponse> | undefined): boolean {
    return proto3.util.equals(DeleteProjectSecretResponse, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.ProjectUser
 */
export class ProjectUser extends Message<ProjectUser> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string email = 4;
   */
  email = "";

  /**
   * @generated from field: string role = 5;
   */
  role = "";

  /**
   * @generated from field: string created_at = 6;
   */
  createdAt = "";

  constructor(data?: PartialMessage<ProjectUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.ProjectUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectUser {
    return new ProjectUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectUser {
    return new ProjectUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectUser {
    return new ProjectUser().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectUser | PlainMessage<ProjectUser> | undefined, b: ProjectUser | PlainMessage<ProjectUser> | undefined): boolean {
    return proto3.util.equals(ProjectUser, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.FetchProjectUsersRequest
 */
export class FetchProjectUsersRequest extends Message<FetchProjectUsersRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * @generated from field: optional uint32 page = 2;
   */
  page?: number;

  /**
   * @generated from field: optional uint32 page_size = 3;
   */
  pageSize?: number;

  constructor(data?: PartialMessage<FetchProjectUsersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.FetchProjectUsersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 3, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchProjectUsersRequest {
    return new FetchProjectUsersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchProjectUsersRequest {
    return new FetchProjectUsersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchProjectUsersRequest {
    return new FetchProjectUsersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FetchProjectUsersRequest | PlainMessage<FetchProjectUsersRequest> | undefined, b: FetchProjectUsersRequest | PlainMessage<FetchProjectUsersRequest> | undefined): boolean {
    return proto3.util.equals(FetchProjectUsersRequest, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.FetchProjectUsersResponse
 */
export class FetchProjectUsersResponse extends Message<FetchProjectUsersResponse> {
  /**
   * @generated from field: repeated demeter.ops.v1alpha.ProjectUser records = 1;
   */
  records: ProjectUser[] = [];

  constructor(data?: PartialMessage<FetchProjectUsersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.FetchProjectUsersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "records", kind: "message", T: ProjectUser, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchProjectUsersResponse {
    return new FetchProjectUsersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchProjectUsersResponse {
    return new FetchProjectUsersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchProjectUsersResponse {
    return new FetchProjectUsersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FetchProjectUsersResponse | PlainMessage<FetchProjectUsersResponse> | undefined, b: FetchProjectUsersResponse | PlainMessage<FetchProjectUsersResponse> | undefined): boolean {
    return proto3.util.equals(FetchProjectUsersResponse, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.FetchMeProjectUserRequest
 */
export class FetchMeProjectUserRequest extends Message<FetchMeProjectUserRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  constructor(data?: PartialMessage<FetchMeProjectUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.FetchMeProjectUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchMeProjectUserRequest {
    return new FetchMeProjectUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchMeProjectUserRequest {
    return new FetchMeProjectUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchMeProjectUserRequest {
    return new FetchMeProjectUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FetchMeProjectUserRequest | PlainMessage<FetchMeProjectUserRequest> | undefined, b: FetchMeProjectUserRequest | PlainMessage<FetchMeProjectUserRequest> | undefined): boolean {
    return proto3.util.equals(FetchMeProjectUserRequest, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.FetchMeProjectUserResponse
 */
export class FetchMeProjectUserResponse extends Message<FetchMeProjectUserResponse> {
  /**
   * @generated from field: repeated demeter.ops.v1alpha.ProjectUser records = 1;
   */
  records: ProjectUser[] = [];

  constructor(data?: PartialMessage<FetchMeProjectUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.FetchMeProjectUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "records", kind: "message", T: ProjectUser, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchMeProjectUserResponse {
    return new FetchMeProjectUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchMeProjectUserResponse {
    return new FetchMeProjectUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchMeProjectUserResponse {
    return new FetchMeProjectUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FetchMeProjectUserResponse | PlainMessage<FetchMeProjectUserResponse> | undefined, b: FetchMeProjectUserResponse | PlainMessage<FetchMeProjectUserResponse> | undefined): boolean {
    return proto3.util.equals(FetchMeProjectUserResponse, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.DeleteProjectUserRequest
 */
export class DeleteProjectUserRequest extends Message<DeleteProjectUserRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteProjectUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.DeleteProjectUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteProjectUserRequest {
    return new DeleteProjectUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteProjectUserRequest {
    return new DeleteProjectUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteProjectUserRequest {
    return new DeleteProjectUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteProjectUserRequest | PlainMessage<DeleteProjectUserRequest> | undefined, b: DeleteProjectUserRequest | PlainMessage<DeleteProjectUserRequest> | undefined): boolean {
    return proto3.util.equals(DeleteProjectUserRequest, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.DeleteProjectUserResponse
 */
export class DeleteProjectUserResponse extends Message<DeleteProjectUserResponse> {
  constructor(data?: PartialMessage<DeleteProjectUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.DeleteProjectUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteProjectUserResponse {
    return new DeleteProjectUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteProjectUserResponse {
    return new DeleteProjectUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteProjectUserResponse {
    return new DeleteProjectUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteProjectUserResponse | PlainMessage<DeleteProjectUserResponse> | undefined, b: DeleteProjectUserResponse | PlainMessage<DeleteProjectUserResponse> | undefined): boolean {
    return proto3.util.equals(DeleteProjectUserResponse, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.ProjectUserInvite
 */
export class ProjectUserInvite extends Message<ProjectUserInvite> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string project_id = 2;
   */
  projectId = "";

  /**
   * @generated from field: string email = 3;
   */
  email = "";

  /**
   * @generated from field: string role = 4;
   */
  role = "";

  /**
   * @generated from field: string status = 5;
   */
  status = "";

  /**
   * @generated from field: string expires_in = 6;
   */
  expiresIn = "";

  /**
   * @generated from field: string created_at = 7;
   */
  createdAt = "";

  /**
   * @generated from field: string updated_at = 8;
   */
  updatedAt = "";

  constructor(data?: PartialMessage<ProjectUserInvite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.ProjectUserInvite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "expires_in", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectUserInvite {
    return new ProjectUserInvite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectUserInvite {
    return new ProjectUserInvite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectUserInvite {
    return new ProjectUserInvite().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectUserInvite | PlainMessage<ProjectUserInvite> | undefined, b: ProjectUserInvite | PlainMessage<ProjectUserInvite> | undefined): boolean {
    return proto3.util.equals(ProjectUserInvite, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.FetchProjectUserInvitesRequest
 */
export class FetchProjectUserInvitesRequest extends Message<FetchProjectUserInvitesRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * @generated from field: optional uint32 page = 2;
   */
  page?: number;

  /**
   * @generated from field: optional uint32 page_size = 3;
   */
  pageSize?: number;

  constructor(data?: PartialMessage<FetchProjectUserInvitesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.FetchProjectUserInvitesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 3, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchProjectUserInvitesRequest {
    return new FetchProjectUserInvitesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchProjectUserInvitesRequest {
    return new FetchProjectUserInvitesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchProjectUserInvitesRequest {
    return new FetchProjectUserInvitesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FetchProjectUserInvitesRequest | PlainMessage<FetchProjectUserInvitesRequest> | undefined, b: FetchProjectUserInvitesRequest | PlainMessage<FetchProjectUserInvitesRequest> | undefined): boolean {
    return proto3.util.equals(FetchProjectUserInvitesRequest, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.FetchProjectUserInvitesResponse
 */
export class FetchProjectUserInvitesResponse extends Message<FetchProjectUserInvitesResponse> {
  /**
   * @generated from field: repeated demeter.ops.v1alpha.ProjectUserInvite records = 1;
   */
  records: ProjectUserInvite[] = [];

  constructor(data?: PartialMessage<FetchProjectUserInvitesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.FetchProjectUserInvitesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "records", kind: "message", T: ProjectUserInvite, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchProjectUserInvitesResponse {
    return new FetchProjectUserInvitesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchProjectUserInvitesResponse {
    return new FetchProjectUserInvitesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchProjectUserInvitesResponse {
    return new FetchProjectUserInvitesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FetchProjectUserInvitesResponse | PlainMessage<FetchProjectUserInvitesResponse> | undefined, b: FetchProjectUserInvitesResponse | PlainMessage<FetchProjectUserInvitesResponse> | undefined): boolean {
    return proto3.util.equals(FetchProjectUserInvitesResponse, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.CreateProjectUserInviteRequest
 */
export class CreateProjectUserInviteRequest extends Message<CreateProjectUserInviteRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * @generated from field: string role = 3;
   */
  role = "";

  constructor(data?: PartialMessage<CreateProjectUserInviteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.CreateProjectUserInviteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateProjectUserInviteRequest {
    return new CreateProjectUserInviteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateProjectUserInviteRequest {
    return new CreateProjectUserInviteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateProjectUserInviteRequest {
    return new CreateProjectUserInviteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateProjectUserInviteRequest | PlainMessage<CreateProjectUserInviteRequest> | undefined, b: CreateProjectUserInviteRequest | PlainMessage<CreateProjectUserInviteRequest> | undefined): boolean {
    return proto3.util.equals(CreateProjectUserInviteRequest, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.CreateProjectUserInviteResponse
 */
export class CreateProjectUserInviteResponse extends Message<CreateProjectUserInviteResponse> {
  constructor(data?: PartialMessage<CreateProjectUserInviteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.CreateProjectUserInviteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateProjectUserInviteResponse {
    return new CreateProjectUserInviteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateProjectUserInviteResponse {
    return new CreateProjectUserInviteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateProjectUserInviteResponse {
    return new CreateProjectUserInviteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateProjectUserInviteResponse | PlainMessage<CreateProjectUserInviteResponse> | undefined, b: CreateProjectUserInviteResponse | PlainMessage<CreateProjectUserInviteResponse> | undefined): boolean {
    return proto3.util.equals(CreateProjectUserInviteResponse, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.AcceptProjectUserInviteRequest
 */
export class AcceptProjectUserInviteRequest extends Message<AcceptProjectUserInviteRequest> {
  /**
   * @generated from field: string code = 1;
   */
  code = "";

  constructor(data?: PartialMessage<AcceptProjectUserInviteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.AcceptProjectUserInviteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AcceptProjectUserInviteRequest {
    return new AcceptProjectUserInviteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AcceptProjectUserInviteRequest {
    return new AcceptProjectUserInviteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AcceptProjectUserInviteRequest {
    return new AcceptProjectUserInviteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AcceptProjectUserInviteRequest | PlainMessage<AcceptProjectUserInviteRequest> | undefined, b: AcceptProjectUserInviteRequest | PlainMessage<AcceptProjectUserInviteRequest> | undefined): boolean {
    return proto3.util.equals(AcceptProjectUserInviteRequest, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.AcceptProjectUserInviteResponse
 */
export class AcceptProjectUserInviteResponse extends Message<AcceptProjectUserInviteResponse> {
  constructor(data?: PartialMessage<AcceptProjectUserInviteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.AcceptProjectUserInviteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AcceptProjectUserInviteResponse {
    return new AcceptProjectUserInviteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AcceptProjectUserInviteResponse {
    return new AcceptProjectUserInviteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AcceptProjectUserInviteResponse {
    return new AcceptProjectUserInviteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AcceptProjectUserInviteResponse | PlainMessage<AcceptProjectUserInviteResponse> | undefined, b: AcceptProjectUserInviteResponse | PlainMessage<AcceptProjectUserInviteResponse> | undefined): boolean {
    return proto3.util.equals(AcceptProjectUserInviteResponse, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.ResendProjectUserInviteRequest
 */
export class ResendProjectUserInviteRequest extends Message<ResendProjectUserInviteRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<ResendProjectUserInviteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.ResendProjectUserInviteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResendProjectUserInviteRequest {
    return new ResendProjectUserInviteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResendProjectUserInviteRequest {
    return new ResendProjectUserInviteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResendProjectUserInviteRequest {
    return new ResendProjectUserInviteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ResendProjectUserInviteRequest | PlainMessage<ResendProjectUserInviteRequest> | undefined, b: ResendProjectUserInviteRequest | PlainMessage<ResendProjectUserInviteRequest> | undefined): boolean {
    return proto3.util.equals(ResendProjectUserInviteRequest, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.ResendProjectUserInviteResponse
 */
export class ResendProjectUserInviteResponse extends Message<ResendProjectUserInviteResponse> {
  constructor(data?: PartialMessage<ResendProjectUserInviteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.ResendProjectUserInviteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResendProjectUserInviteResponse {
    return new ResendProjectUserInviteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResendProjectUserInviteResponse {
    return new ResendProjectUserInviteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResendProjectUserInviteResponse {
    return new ResendProjectUserInviteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ResendProjectUserInviteResponse | PlainMessage<ResendProjectUserInviteResponse> | undefined, b: ResendProjectUserInviteResponse | PlainMessage<ResendProjectUserInviteResponse> | undefined): boolean {
    return proto3.util.equals(ResendProjectUserInviteResponse, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.DeleteProjectUserInviteRequest
 */
export class DeleteProjectUserInviteRequest extends Message<DeleteProjectUserInviteRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteProjectUserInviteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.DeleteProjectUserInviteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteProjectUserInviteRequest {
    return new DeleteProjectUserInviteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteProjectUserInviteRequest {
    return new DeleteProjectUserInviteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteProjectUserInviteRequest {
    return new DeleteProjectUserInviteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteProjectUserInviteRequest | PlainMessage<DeleteProjectUserInviteRequest> | undefined, b: DeleteProjectUserInviteRequest | PlainMessage<DeleteProjectUserInviteRequest> | undefined): boolean {
    return proto3.util.equals(DeleteProjectUserInviteRequest, a, b);
  }
}

/**
 * @generated from message demeter.ops.v1alpha.DeleteProjectUserInviteResponse
 */
export class DeleteProjectUserInviteResponse extends Message<DeleteProjectUserInviteResponse> {
  constructor(data?: PartialMessage<DeleteProjectUserInviteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demeter.ops.v1alpha.DeleteProjectUserInviteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteProjectUserInviteResponse {
    return new DeleteProjectUserInviteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteProjectUserInviteResponse {
    return new DeleteProjectUserInviteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteProjectUserInviteResponse {
    return new DeleteProjectUserInviteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteProjectUserInviteResponse | PlainMessage<DeleteProjectUserInviteResponse> | undefined, b: DeleteProjectUserInviteResponse | PlainMessage<DeleteProjectUserInviteResponse> | undefined): boolean {
    return proto3.util.equals(DeleteProjectUserInviteResponse, a, b);
  }
}

