// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "proto/demeter/ops/v1alpha/resource.proto" (package "demeter.ops.v1alpha", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message demeter.ops.v1alpha.CreateResourceRequest
 */
export interface CreateResourceRequest {
    /**
     * @generated from protobuf field: string project_id = 1
     */
    projectId: string;
    /**
     * @generated from protobuf field: string kind = 2
     */
    kind: string;
    /**
     * @generated from protobuf field: string spec = 3
     */
    spec: string;
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.CreateResourceResponse
 */
export interface CreateResourceResponse {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2
     */
    name: string;
    /**
     * @generated from protobuf field: string kind = 3
     */
    kind: string;
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.UpdateResourceRequest
 */
export interface UpdateResourceRequest {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * @generated from protobuf field: string spec_patch = 2
     */
    specPatch: string;
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.UpdateResourceResponse
 */
export interface UpdateResourceResponse {
    /**
     * @generated from protobuf field: demeter.ops.v1alpha.Resource updated = 1
     */
    updated?: Resource;
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.Resource
 */
export interface Resource {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2
     */
    name: string;
    /**
     * @generated from protobuf field: string kind = 3
     */
    kind: string;
    /**
     * @generated from protobuf field: string spec = 4
     */
    spec: string;
    /**
     * @generated from protobuf field: optional string annotations = 5
     */
    annotations?: string;
    /**
     * @generated from protobuf field: string status = 6
     */
    status: string;
    /**
     * @generated from protobuf field: string created_at = 7
     */
    createdAt: string;
    /**
     * @generated from protobuf field: string updated_at = 8
     */
    updatedAt: string;
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.FetchResourcesRequest
 */
export interface FetchResourcesRequest {
    /**
     * @generated from protobuf field: string project_id = 1
     */
    projectId: string;
    /**
     * @generated from protobuf field: optional uint32 page = 2
     */
    page?: number;
    /**
     * @generated from protobuf field: optional uint32 page_size = 3
     */
    pageSize?: number;
    /**
     * @generated from protobuf field: optional string category = 4
     */
    category?: string;
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.FetchResourcesResponse
 */
export interface FetchResourcesResponse {
    /**
     * @generated from protobuf field: repeated demeter.ops.v1alpha.Resource records = 1
     */
    records: Resource[];
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.FetchResourcesByIdRequest
 */
export interface FetchResourcesByIdRequest {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.FetchResourcesByIdResponse
 */
export interface FetchResourcesByIdResponse {
    /**
     * @generated from protobuf field: repeated demeter.ops.v1alpha.Resource records = 1
     */
    records: Resource[];
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.DeleteResourceRequest
 */
export interface DeleteResourceRequest {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.DeleteResourceResponse
 */
export interface DeleteResourceResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateResourceRequest$Type extends MessageType<CreateResourceRequest> {
    constructor() {
        super("demeter.ops.v1alpha.CreateResourceRequest", [
            { no: 1, name: "project_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "kind", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "spec", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateResourceRequest>): CreateResourceRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.projectId = "";
        message.kind = "";
        message.spec = "";
        if (value !== undefined)
            reflectionMergePartial<CreateResourceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateResourceRequest): CreateResourceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string project_id */ 1:
                    message.projectId = reader.string();
                    break;
                case /* string kind */ 2:
                    message.kind = reader.string();
                    break;
                case /* string spec */ 3:
                    message.spec = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateResourceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string project_id = 1; */
        if (message.projectId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.projectId);
        /* string kind = 2; */
        if (message.kind !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.kind);
        /* string spec = 3; */
        if (message.spec !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.spec);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.CreateResourceRequest
 */
export const CreateResourceRequest = new CreateResourceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateResourceResponse$Type extends MessageType<CreateResourceResponse> {
    constructor() {
        super("demeter.ops.v1alpha.CreateResourceResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "kind", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateResourceResponse>): CreateResourceResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.kind = "";
        if (value !== undefined)
            reflectionMergePartial<CreateResourceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateResourceResponse): CreateResourceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string kind */ 3:
                    message.kind = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateResourceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string kind = 3; */
        if (message.kind !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.kind);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.CreateResourceResponse
 */
export const CreateResourceResponse = new CreateResourceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateResourceRequest$Type extends MessageType<UpdateResourceRequest> {
    constructor() {
        super("demeter.ops.v1alpha.UpdateResourceRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "spec_patch", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateResourceRequest>): UpdateResourceRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.specPatch = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateResourceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateResourceRequest): UpdateResourceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string spec_patch */ 2:
                    message.specPatch = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateResourceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string spec_patch = 2; */
        if (message.specPatch !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.specPatch);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.UpdateResourceRequest
 */
export const UpdateResourceRequest = new UpdateResourceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateResourceResponse$Type extends MessageType<UpdateResourceResponse> {
    constructor() {
        super("demeter.ops.v1alpha.UpdateResourceResponse", [
            { no: 1, name: "updated", kind: "message", T: () => Resource }
        ]);
    }
    create(value?: PartialMessage<UpdateResourceResponse>): UpdateResourceResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateResourceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateResourceResponse): UpdateResourceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* demeter.ops.v1alpha.Resource updated */ 1:
                    message.updated = Resource.internalBinaryRead(reader, reader.uint32(), options, message.updated);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateResourceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* demeter.ops.v1alpha.Resource updated = 1; */
        if (message.updated)
            Resource.internalBinaryWrite(message.updated, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.UpdateResourceResponse
 */
export const UpdateResourceResponse = new UpdateResourceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Resource$Type extends MessageType<Resource> {
    constructor() {
        super("demeter.ops.v1alpha.Resource", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "kind", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "spec", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "annotations", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Resource>): Resource {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.kind = "";
        message.spec = "";
        message.status = "";
        message.createdAt = "";
        message.updatedAt = "";
        if (value !== undefined)
            reflectionMergePartial<Resource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Resource): Resource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string kind */ 3:
                    message.kind = reader.string();
                    break;
                case /* string spec */ 4:
                    message.spec = reader.string();
                    break;
                case /* optional string annotations */ 5:
                    message.annotations = reader.string();
                    break;
                case /* string status */ 6:
                    message.status = reader.string();
                    break;
                case /* string created_at */ 7:
                    message.createdAt = reader.string();
                    break;
                case /* string updated_at */ 8:
                    message.updatedAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Resource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string kind = 3; */
        if (message.kind !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.kind);
        /* string spec = 4; */
        if (message.spec !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.spec);
        /* optional string annotations = 5; */
        if (message.annotations !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.annotations);
        /* string status = 6; */
        if (message.status !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.status);
        /* string created_at = 7; */
        if (message.createdAt !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.createdAt);
        /* string updated_at = 8; */
        if (message.updatedAt !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.updatedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.Resource
 */
export const Resource = new Resource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FetchResourcesRequest$Type extends MessageType<FetchResourcesRequest> {
    constructor() {
        super("demeter.ops.v1alpha.FetchResourcesRequest", [
            { no: 1, name: "project_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "page", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "page_size", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "category", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FetchResourcesRequest>): FetchResourcesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.projectId = "";
        if (value !== undefined)
            reflectionMergePartial<FetchResourcesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FetchResourcesRequest): FetchResourcesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string project_id */ 1:
                    message.projectId = reader.string();
                    break;
                case /* optional uint32 page */ 2:
                    message.page = reader.uint32();
                    break;
                case /* optional uint32 page_size */ 3:
                    message.pageSize = reader.uint32();
                    break;
                case /* optional string category */ 4:
                    message.category = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FetchResourcesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string project_id = 1; */
        if (message.projectId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.projectId);
        /* optional uint32 page = 2; */
        if (message.page !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.page);
        /* optional uint32 page_size = 3; */
        if (message.pageSize !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.pageSize);
        /* optional string category = 4; */
        if (message.category !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.category);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.FetchResourcesRequest
 */
export const FetchResourcesRequest = new FetchResourcesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FetchResourcesResponse$Type extends MessageType<FetchResourcesResponse> {
    constructor() {
        super("demeter.ops.v1alpha.FetchResourcesResponse", [
            { no: 1, name: "records", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Resource }
        ]);
    }
    create(value?: PartialMessage<FetchResourcesResponse>): FetchResourcesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.records = [];
        if (value !== undefined)
            reflectionMergePartial<FetchResourcesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FetchResourcesResponse): FetchResourcesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated demeter.ops.v1alpha.Resource records */ 1:
                    message.records.push(Resource.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FetchResourcesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated demeter.ops.v1alpha.Resource records = 1; */
        for (let i = 0; i < message.records.length; i++)
            Resource.internalBinaryWrite(message.records[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.FetchResourcesResponse
 */
export const FetchResourcesResponse = new FetchResourcesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FetchResourcesByIdRequest$Type extends MessageType<FetchResourcesByIdRequest> {
    constructor() {
        super("demeter.ops.v1alpha.FetchResourcesByIdRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FetchResourcesByIdRequest>): FetchResourcesByIdRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<FetchResourcesByIdRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FetchResourcesByIdRequest): FetchResourcesByIdRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FetchResourcesByIdRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.FetchResourcesByIdRequest
 */
export const FetchResourcesByIdRequest = new FetchResourcesByIdRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FetchResourcesByIdResponse$Type extends MessageType<FetchResourcesByIdResponse> {
    constructor() {
        super("demeter.ops.v1alpha.FetchResourcesByIdResponse", [
            { no: 1, name: "records", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Resource }
        ]);
    }
    create(value?: PartialMessage<FetchResourcesByIdResponse>): FetchResourcesByIdResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.records = [];
        if (value !== undefined)
            reflectionMergePartial<FetchResourcesByIdResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FetchResourcesByIdResponse): FetchResourcesByIdResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated demeter.ops.v1alpha.Resource records */ 1:
                    message.records.push(Resource.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FetchResourcesByIdResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated demeter.ops.v1alpha.Resource records = 1; */
        for (let i = 0; i < message.records.length; i++)
            Resource.internalBinaryWrite(message.records[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.FetchResourcesByIdResponse
 */
export const FetchResourcesByIdResponse = new FetchResourcesByIdResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteResourceRequest$Type extends MessageType<DeleteResourceRequest> {
    constructor() {
        super("demeter.ops.v1alpha.DeleteResourceRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteResourceRequest>): DeleteResourceRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteResourceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteResourceRequest): DeleteResourceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteResourceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.DeleteResourceRequest
 */
export const DeleteResourceRequest = new DeleteResourceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteResourceResponse$Type extends MessageType<DeleteResourceResponse> {
    constructor() {
        super("demeter.ops.v1alpha.DeleteResourceResponse", []);
    }
    create(value?: PartialMessage<DeleteResourceResponse>): DeleteResourceResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteResourceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteResourceResponse): DeleteResourceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteResourceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.DeleteResourceResponse
 */
export const DeleteResourceResponse = new DeleteResourceResponse$Type();
/**
 * @generated ServiceType for protobuf service demeter.ops.v1alpha.ResourceService
 */
export const ResourceService = new ServiceType("demeter.ops.v1alpha.ResourceService", [
    { name: "FetchResources", options: {}, I: FetchResourcesRequest, O: FetchResourcesResponse },
    { name: "FetchResourcesById", options: {}, I: FetchResourcesByIdRequest, O: FetchResourcesByIdResponse },
    { name: "CreateResource", options: {}, I: CreateResourceRequest, O: CreateResourceResponse },
    { name: "UpdateResource", options: {}, I: UpdateResourceRequest, O: UpdateResourceResponse },
    { name: "DeleteResource", options: {}, I: DeleteResourceRequest, O: DeleteResourceResponse }
]);
