// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "proto/demeter/ops/v1alpha/metadata.proto" (package "demeter.ops.v1alpha", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message demeter.ops.v1alpha.Metadata
 */
export interface Metadata {
    /**
     * @generated from protobuf field: string options = 1
     */
    options: string;
    /**
     * @generated from protobuf field: string crd = 2
     */
    crd: string;
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.FetchMetadataRequest
 */
export interface FetchMetadataRequest {
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.FetchMetadataResponse
 */
export interface FetchMetadataResponse {
    /**
     * @generated from protobuf field: repeated demeter.ops.v1alpha.Metadata records = 1
     */
    records: Metadata[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Metadata$Type extends MessageType<Metadata> {
    constructor() {
        super("demeter.ops.v1alpha.Metadata", [
            { no: 1, name: "options", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "crd", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Metadata>): Metadata {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.options = "";
        message.crd = "";
        if (value !== undefined)
            reflectionMergePartial<Metadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Metadata): Metadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string options */ 1:
                    message.options = reader.string();
                    break;
                case /* string crd */ 2:
                    message.crd = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Metadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string options = 1; */
        if (message.options !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.options);
        /* string crd = 2; */
        if (message.crd !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.crd);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.Metadata
 */
export const Metadata = new Metadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FetchMetadataRequest$Type extends MessageType<FetchMetadataRequest> {
    constructor() {
        super("demeter.ops.v1alpha.FetchMetadataRequest", []);
    }
    create(value?: PartialMessage<FetchMetadataRequest>): FetchMetadataRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FetchMetadataRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FetchMetadataRequest): FetchMetadataRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FetchMetadataRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.FetchMetadataRequest
 */
export const FetchMetadataRequest = new FetchMetadataRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FetchMetadataResponse$Type extends MessageType<FetchMetadataResponse> {
    constructor() {
        super("demeter.ops.v1alpha.FetchMetadataResponse", [
            { no: 1, name: "records", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Metadata }
        ]);
    }
    create(value?: PartialMessage<FetchMetadataResponse>): FetchMetadataResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.records = [];
        if (value !== undefined)
            reflectionMergePartial<FetchMetadataResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FetchMetadataResponse): FetchMetadataResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated demeter.ops.v1alpha.Metadata records */ 1:
                    message.records.push(Metadata.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FetchMetadataResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated demeter.ops.v1alpha.Metadata records = 1; */
        for (let i = 0; i < message.records.length; i++)
            Metadata.internalBinaryWrite(message.records[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.FetchMetadataResponse
 */
export const FetchMetadataResponse = new FetchMetadataResponse$Type();
/**
 * @generated ServiceType for protobuf service demeter.ops.v1alpha.MetadataService
 */
export const MetadataService = new ServiceType("demeter.ops.v1alpha.MetadataService", [
    { name: "FetchMetadata", options: {}, I: FetchMetadataRequest, O: FetchMetadataResponse }
]);
