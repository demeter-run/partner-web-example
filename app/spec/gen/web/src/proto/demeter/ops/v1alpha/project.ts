// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "proto/demeter/ops/v1alpha/project.proto" (package "demeter.ops.v1alpha", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message demeter.ops.v1alpha.Project
 */
export interface Project {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2
     */
    name: string;
    /**
     * @generated from protobuf field: string namespace = 3
     */
    namespace: string;
    /**
     * @generated from protobuf field: string status = 4
     */
    status: string;
    /**
     * @generated from protobuf field: string billing_provider = 5
     */
    billingProvider: string;
    /**
     * @generated from protobuf field: string billing_provider_id = 6
     */
    billingProviderId: string;
    /**
     * @generated from protobuf field: optional string billing_subscription_id = 7
     */
    billingSubscriptionId?: string;
    /**
     * @generated from protobuf field: string created_at = 8
     */
    createdAt: string;
    /**
     * @generated from protobuf field: string updated_at = 9
     */
    updatedAt: string;
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.CreateProjectRequest
 */
export interface CreateProjectRequest {
    /**
     * @generated from protobuf field: string name = 1
     */
    name: string;
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.CreateProjectResponse
 */
export interface CreateProjectResponse {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2
     */
    name: string;
    /**
     * @generated from protobuf field: string namespace = 3
     */
    namespace: string;
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.UpdateProjectRequest
 */
export interface UpdateProjectRequest {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2
     */
    name: string;
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.UpdateProjectResponse
 */
export interface UpdateProjectResponse {
    /**
     * @generated from protobuf field: demeter.ops.v1alpha.Project updated = 1
     */
    updated?: Project;
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.FetchProjectsRequest
 */
export interface FetchProjectsRequest {
    /**
     * @generated from protobuf field: optional uint32 page = 1
     */
    page?: number;
    /**
     * @generated from protobuf field: optional uint32 page_size = 2
     */
    pageSize?: number;
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.FetchProjectsResponse
 */
export interface FetchProjectsResponse {
    /**
     * @generated from protobuf field: repeated demeter.ops.v1alpha.Project records = 2
     */
    records: Project[];
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.FetchProjectByIdRequest
 */
export interface FetchProjectByIdRequest {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.FetchProjectByIdResponse
 */
export interface FetchProjectByIdResponse {
    /**
     * @generated from protobuf field: repeated demeter.ops.v1alpha.Project records = 1
     */
    records: Project[];
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.FetchProjectByNamespaceRequest
 */
export interface FetchProjectByNamespaceRequest {
    /**
     * @generated from protobuf field: string namespace = 1
     */
    namespace: string;
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.FetchProjectByNamespaceResponse
 */
export interface FetchProjectByNamespaceResponse {
    /**
     * @generated from protobuf field: repeated demeter.ops.v1alpha.Project records = 1
     */
    records: Project[];
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.DeleteProjectRequest
 */
export interface DeleteProjectRequest {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.DeleteProjectResponse
 */
export interface DeleteProjectResponse {
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.ProjectSecret
 */
export interface ProjectSecret {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * @generated from protobuf field: string project_id = 2
     */
    projectId: string;
    /**
     * @generated from protobuf field: string name = 3
     */
    name: string;
    /**
     * @generated from protobuf field: string created_at = 4
     */
    createdAt: string;
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.CreateProjectSecretRequest
 */
export interface CreateProjectSecretRequest {
    /**
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * @generated from protobuf field: string project_id = 2
     */
    projectId: string;
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.CreateProjectSecretResponse
 */
export interface CreateProjectSecretResponse {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2
     */
    name: string;
    /**
     * @generated from protobuf field: string key = 3
     */
    key: string;
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.FetchProjectSecretsRequest
 */
export interface FetchProjectSecretsRequest {
    /**
     * @generated from protobuf field: string project_id = 1
     */
    projectId: string;
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.FetchProjectSecretsResponse
 */
export interface FetchProjectSecretsResponse {
    /**
     * @generated from protobuf field: repeated demeter.ops.v1alpha.ProjectSecret records = 2
     */
    records: ProjectSecret[];
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.DeleteProjectSecretRequest
 */
export interface DeleteProjectSecretRequest {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.DeleteProjectSecretResponse
 */
export interface DeleteProjectSecretResponse {
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.ProjectUser
 */
export interface ProjectUser {
    /**
     * @generated from protobuf field: string project_id = 1
     */
    projectId: string;
    /**
     * @generated from protobuf field: string user_id = 2
     */
    userId: string;
    /**
     * @generated from protobuf field: string name = 3
     */
    name: string;
    /**
     * @generated from protobuf field: string email = 4
     */
    email: string;
    /**
     * @generated from protobuf field: string role = 5
     */
    role: string;
    /**
     * @generated from protobuf field: string created_at = 6
     */
    createdAt: string;
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.FetchProjectUsersRequest
 */
export interface FetchProjectUsersRequest {
    /**
     * @generated from protobuf field: string project_id = 1
     */
    projectId: string;
    /**
     * @generated from protobuf field: optional uint32 page = 2
     */
    page?: number;
    /**
     * @generated from protobuf field: optional uint32 page_size = 3
     */
    pageSize?: number;
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.FetchProjectUsersResponse
 */
export interface FetchProjectUsersResponse {
    /**
     * @generated from protobuf field: repeated demeter.ops.v1alpha.ProjectUser records = 1
     */
    records: ProjectUser[];
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.FetchMeProjectUserRequest
 */
export interface FetchMeProjectUserRequest {
    /**
     * @generated from protobuf field: string project_id = 1
     */
    projectId: string;
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.FetchMeProjectUserResponse
 */
export interface FetchMeProjectUserResponse {
    /**
     * @generated from protobuf field: repeated demeter.ops.v1alpha.ProjectUser records = 1
     */
    records: ProjectUser[];
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.DeleteProjectUserRequest
 */
export interface DeleteProjectUserRequest {
    /**
     * @generated from protobuf field: string project_id = 1
     */
    projectId: string;
    /**
     * @generated from protobuf field: string id = 2
     */
    id: string;
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.DeleteProjectUserResponse
 */
export interface DeleteProjectUserResponse {
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.ProjectUserInvite
 */
export interface ProjectUserInvite {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * @generated from protobuf field: string project_id = 2
     */
    projectId: string;
    /**
     * @generated from protobuf field: string email = 3
     */
    email: string;
    /**
     * @generated from protobuf field: string role = 4
     */
    role: string;
    /**
     * @generated from protobuf field: string status = 5
     */
    status: string;
    /**
     * @generated from protobuf field: string expires_in = 6
     */
    expiresIn: string;
    /**
     * @generated from protobuf field: string created_at = 7
     */
    createdAt: string;
    /**
     * @generated from protobuf field: string updated_at = 8
     */
    updatedAt: string;
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.FetchProjectUserInvitesRequest
 */
export interface FetchProjectUserInvitesRequest {
    /**
     * @generated from protobuf field: string project_id = 1
     */
    projectId: string;
    /**
     * @generated from protobuf field: optional uint32 page = 2
     */
    page?: number;
    /**
     * @generated from protobuf field: optional uint32 page_size = 3
     */
    pageSize?: number;
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.FetchProjectUserInvitesResponse
 */
export interface FetchProjectUserInvitesResponse {
    /**
     * @generated from protobuf field: repeated demeter.ops.v1alpha.ProjectUserInvite records = 1
     */
    records: ProjectUserInvite[];
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.CreateProjectUserInviteRequest
 */
export interface CreateProjectUserInviteRequest {
    /**
     * @generated from protobuf field: string project_id = 1
     */
    projectId: string;
    /**
     * @generated from protobuf field: string email = 2
     */
    email: string;
    /**
     * @generated from protobuf field: string role = 3
     */
    role: string;
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.CreateProjectUserInviteResponse
 */
export interface CreateProjectUserInviteResponse {
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.AcceptProjectUserInviteRequest
 */
export interface AcceptProjectUserInviteRequest {
    /**
     * @generated from protobuf field: string code = 1
     */
    code: string;
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.AcceptProjectUserInviteResponse
 */
export interface AcceptProjectUserInviteResponse {
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.ResendProjectUserInviteRequest
 */
export interface ResendProjectUserInviteRequest {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.ResendProjectUserInviteResponse
 */
export interface ResendProjectUserInviteResponse {
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.DeleteProjectUserInviteRequest
 */
export interface DeleteProjectUserInviteRequest {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
}
/**
 * @generated from protobuf message demeter.ops.v1alpha.DeleteProjectUserInviteResponse
 */
export interface DeleteProjectUserInviteResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class Project$Type extends MessageType<Project> {
    constructor() {
        super("demeter.ops.v1alpha.Project", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "namespace", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "billing_provider", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "billing_provider_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "billing_subscription_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Project>): Project {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.namespace = "";
        message.status = "";
        message.billingProvider = "";
        message.billingProviderId = "";
        message.createdAt = "";
        message.updatedAt = "";
        if (value !== undefined)
            reflectionMergePartial<Project>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Project): Project {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string namespace */ 3:
                    message.namespace = reader.string();
                    break;
                case /* string status */ 4:
                    message.status = reader.string();
                    break;
                case /* string billing_provider */ 5:
                    message.billingProvider = reader.string();
                    break;
                case /* string billing_provider_id */ 6:
                    message.billingProviderId = reader.string();
                    break;
                case /* optional string billing_subscription_id */ 7:
                    message.billingSubscriptionId = reader.string();
                    break;
                case /* string created_at */ 8:
                    message.createdAt = reader.string();
                    break;
                case /* string updated_at */ 9:
                    message.updatedAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Project, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string namespace = 3; */
        if (message.namespace !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.namespace);
        /* string status = 4; */
        if (message.status !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.status);
        /* string billing_provider = 5; */
        if (message.billingProvider !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.billingProvider);
        /* string billing_provider_id = 6; */
        if (message.billingProviderId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.billingProviderId);
        /* optional string billing_subscription_id = 7; */
        if (message.billingSubscriptionId !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.billingSubscriptionId);
        /* string created_at = 8; */
        if (message.createdAt !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.createdAt);
        /* string updated_at = 9; */
        if (message.updatedAt !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.updatedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.Project
 */
export const Project = new Project$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateProjectRequest$Type extends MessageType<CreateProjectRequest> {
    constructor() {
        super("demeter.ops.v1alpha.CreateProjectRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateProjectRequest>): CreateProjectRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<CreateProjectRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateProjectRequest): CreateProjectRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateProjectRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.CreateProjectRequest
 */
export const CreateProjectRequest = new CreateProjectRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateProjectResponse$Type extends MessageType<CreateProjectResponse> {
    constructor() {
        super("demeter.ops.v1alpha.CreateProjectResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "namespace", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateProjectResponse>): CreateProjectResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.namespace = "";
        if (value !== undefined)
            reflectionMergePartial<CreateProjectResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateProjectResponse): CreateProjectResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string namespace */ 3:
                    message.namespace = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateProjectResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string namespace = 3; */
        if (message.namespace !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.namespace);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.CreateProjectResponse
 */
export const CreateProjectResponse = new CreateProjectResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateProjectRequest$Type extends MessageType<UpdateProjectRequest> {
    constructor() {
        super("demeter.ops.v1alpha.UpdateProjectRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateProjectRequest>): UpdateProjectRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateProjectRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateProjectRequest): UpdateProjectRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateProjectRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.UpdateProjectRequest
 */
export const UpdateProjectRequest = new UpdateProjectRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateProjectResponse$Type extends MessageType<UpdateProjectResponse> {
    constructor() {
        super("demeter.ops.v1alpha.UpdateProjectResponse", [
            { no: 1, name: "updated", kind: "message", T: () => Project }
        ]);
    }
    create(value?: PartialMessage<UpdateProjectResponse>): UpdateProjectResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateProjectResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateProjectResponse): UpdateProjectResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* demeter.ops.v1alpha.Project updated */ 1:
                    message.updated = Project.internalBinaryRead(reader, reader.uint32(), options, message.updated);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateProjectResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* demeter.ops.v1alpha.Project updated = 1; */
        if (message.updated)
            Project.internalBinaryWrite(message.updated, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.UpdateProjectResponse
 */
export const UpdateProjectResponse = new UpdateProjectResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FetchProjectsRequest$Type extends MessageType<FetchProjectsRequest> {
    constructor() {
        super("demeter.ops.v1alpha.FetchProjectsRequest", [
            { no: 1, name: "page", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "page_size", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FetchProjectsRequest>): FetchProjectsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FetchProjectsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FetchProjectsRequest): FetchProjectsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 page */ 1:
                    message.page = reader.uint32();
                    break;
                case /* optional uint32 page_size */ 2:
                    message.pageSize = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FetchProjectsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 page = 1; */
        if (message.page !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.page);
        /* optional uint32 page_size = 2; */
        if (message.pageSize !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.pageSize);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.FetchProjectsRequest
 */
export const FetchProjectsRequest = new FetchProjectsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FetchProjectsResponse$Type extends MessageType<FetchProjectsResponse> {
    constructor() {
        super("demeter.ops.v1alpha.FetchProjectsResponse", [
            { no: 2, name: "records", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Project }
        ]);
    }
    create(value?: PartialMessage<FetchProjectsResponse>): FetchProjectsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.records = [];
        if (value !== undefined)
            reflectionMergePartial<FetchProjectsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FetchProjectsResponse): FetchProjectsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated demeter.ops.v1alpha.Project records */ 2:
                    message.records.push(Project.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FetchProjectsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated demeter.ops.v1alpha.Project records = 2; */
        for (let i = 0; i < message.records.length; i++)
            Project.internalBinaryWrite(message.records[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.FetchProjectsResponse
 */
export const FetchProjectsResponse = new FetchProjectsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FetchProjectByIdRequest$Type extends MessageType<FetchProjectByIdRequest> {
    constructor() {
        super("demeter.ops.v1alpha.FetchProjectByIdRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FetchProjectByIdRequest>): FetchProjectByIdRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<FetchProjectByIdRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FetchProjectByIdRequest): FetchProjectByIdRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FetchProjectByIdRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.FetchProjectByIdRequest
 */
export const FetchProjectByIdRequest = new FetchProjectByIdRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FetchProjectByIdResponse$Type extends MessageType<FetchProjectByIdResponse> {
    constructor() {
        super("demeter.ops.v1alpha.FetchProjectByIdResponse", [
            { no: 1, name: "records", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Project }
        ]);
    }
    create(value?: PartialMessage<FetchProjectByIdResponse>): FetchProjectByIdResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.records = [];
        if (value !== undefined)
            reflectionMergePartial<FetchProjectByIdResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FetchProjectByIdResponse): FetchProjectByIdResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated demeter.ops.v1alpha.Project records */ 1:
                    message.records.push(Project.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FetchProjectByIdResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated demeter.ops.v1alpha.Project records = 1; */
        for (let i = 0; i < message.records.length; i++)
            Project.internalBinaryWrite(message.records[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.FetchProjectByIdResponse
 */
export const FetchProjectByIdResponse = new FetchProjectByIdResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FetchProjectByNamespaceRequest$Type extends MessageType<FetchProjectByNamespaceRequest> {
    constructor() {
        super("demeter.ops.v1alpha.FetchProjectByNamespaceRequest", [
            { no: 1, name: "namespace", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FetchProjectByNamespaceRequest>): FetchProjectByNamespaceRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.namespace = "";
        if (value !== undefined)
            reflectionMergePartial<FetchProjectByNamespaceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FetchProjectByNamespaceRequest): FetchProjectByNamespaceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string namespace */ 1:
                    message.namespace = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FetchProjectByNamespaceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string namespace = 1; */
        if (message.namespace !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.namespace);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.FetchProjectByNamespaceRequest
 */
export const FetchProjectByNamespaceRequest = new FetchProjectByNamespaceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FetchProjectByNamespaceResponse$Type extends MessageType<FetchProjectByNamespaceResponse> {
    constructor() {
        super("demeter.ops.v1alpha.FetchProjectByNamespaceResponse", [
            { no: 1, name: "records", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Project }
        ]);
    }
    create(value?: PartialMessage<FetchProjectByNamespaceResponse>): FetchProjectByNamespaceResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.records = [];
        if (value !== undefined)
            reflectionMergePartial<FetchProjectByNamespaceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FetchProjectByNamespaceResponse): FetchProjectByNamespaceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated demeter.ops.v1alpha.Project records */ 1:
                    message.records.push(Project.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FetchProjectByNamespaceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated demeter.ops.v1alpha.Project records = 1; */
        for (let i = 0; i < message.records.length; i++)
            Project.internalBinaryWrite(message.records[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.FetchProjectByNamespaceResponse
 */
export const FetchProjectByNamespaceResponse = new FetchProjectByNamespaceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteProjectRequest$Type extends MessageType<DeleteProjectRequest> {
    constructor() {
        super("demeter.ops.v1alpha.DeleteProjectRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteProjectRequest>): DeleteProjectRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteProjectRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteProjectRequest): DeleteProjectRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteProjectRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.DeleteProjectRequest
 */
export const DeleteProjectRequest = new DeleteProjectRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteProjectResponse$Type extends MessageType<DeleteProjectResponse> {
    constructor() {
        super("demeter.ops.v1alpha.DeleteProjectResponse", []);
    }
    create(value?: PartialMessage<DeleteProjectResponse>): DeleteProjectResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteProjectResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteProjectResponse): DeleteProjectResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteProjectResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.DeleteProjectResponse
 */
export const DeleteProjectResponse = new DeleteProjectResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProjectSecret$Type extends MessageType<ProjectSecret> {
    constructor() {
        super("demeter.ops.v1alpha.ProjectSecret", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "project_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ProjectSecret>): ProjectSecret {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.projectId = "";
        message.name = "";
        message.createdAt = "";
        if (value !== undefined)
            reflectionMergePartial<ProjectSecret>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProjectSecret): ProjectSecret {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string project_id */ 2:
                    message.projectId = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* string created_at */ 4:
                    message.createdAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProjectSecret, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string project_id = 2; */
        if (message.projectId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.projectId);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* string created_at = 4; */
        if (message.createdAt !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.createdAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.ProjectSecret
 */
export const ProjectSecret = new ProjectSecret$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateProjectSecretRequest$Type extends MessageType<CreateProjectSecretRequest> {
    constructor() {
        super("demeter.ops.v1alpha.CreateProjectSecretRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "project_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateProjectSecretRequest>): CreateProjectSecretRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.projectId = "";
        if (value !== undefined)
            reflectionMergePartial<CreateProjectSecretRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateProjectSecretRequest): CreateProjectSecretRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string project_id */ 2:
                    message.projectId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateProjectSecretRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string project_id = 2; */
        if (message.projectId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.projectId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.CreateProjectSecretRequest
 */
export const CreateProjectSecretRequest = new CreateProjectSecretRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateProjectSecretResponse$Type extends MessageType<CreateProjectSecretResponse> {
    constructor() {
        super("demeter.ops.v1alpha.CreateProjectSecretResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateProjectSecretResponse>): CreateProjectSecretResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.key = "";
        if (value !== undefined)
            reflectionMergePartial<CreateProjectSecretResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateProjectSecretResponse): CreateProjectSecretResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string key */ 3:
                    message.key = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateProjectSecretResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string key = 3; */
        if (message.key !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.key);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.CreateProjectSecretResponse
 */
export const CreateProjectSecretResponse = new CreateProjectSecretResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FetchProjectSecretsRequest$Type extends MessageType<FetchProjectSecretsRequest> {
    constructor() {
        super("demeter.ops.v1alpha.FetchProjectSecretsRequest", [
            { no: 1, name: "project_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FetchProjectSecretsRequest>): FetchProjectSecretsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.projectId = "";
        if (value !== undefined)
            reflectionMergePartial<FetchProjectSecretsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FetchProjectSecretsRequest): FetchProjectSecretsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string project_id */ 1:
                    message.projectId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FetchProjectSecretsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string project_id = 1; */
        if (message.projectId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.projectId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.FetchProjectSecretsRequest
 */
export const FetchProjectSecretsRequest = new FetchProjectSecretsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FetchProjectSecretsResponse$Type extends MessageType<FetchProjectSecretsResponse> {
    constructor() {
        super("demeter.ops.v1alpha.FetchProjectSecretsResponse", [
            { no: 2, name: "records", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ProjectSecret }
        ]);
    }
    create(value?: PartialMessage<FetchProjectSecretsResponse>): FetchProjectSecretsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.records = [];
        if (value !== undefined)
            reflectionMergePartial<FetchProjectSecretsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FetchProjectSecretsResponse): FetchProjectSecretsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated demeter.ops.v1alpha.ProjectSecret records */ 2:
                    message.records.push(ProjectSecret.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FetchProjectSecretsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated demeter.ops.v1alpha.ProjectSecret records = 2; */
        for (let i = 0; i < message.records.length; i++)
            ProjectSecret.internalBinaryWrite(message.records[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.FetchProjectSecretsResponse
 */
export const FetchProjectSecretsResponse = new FetchProjectSecretsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteProjectSecretRequest$Type extends MessageType<DeleteProjectSecretRequest> {
    constructor() {
        super("demeter.ops.v1alpha.DeleteProjectSecretRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteProjectSecretRequest>): DeleteProjectSecretRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteProjectSecretRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteProjectSecretRequest): DeleteProjectSecretRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteProjectSecretRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.DeleteProjectSecretRequest
 */
export const DeleteProjectSecretRequest = new DeleteProjectSecretRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteProjectSecretResponse$Type extends MessageType<DeleteProjectSecretResponse> {
    constructor() {
        super("demeter.ops.v1alpha.DeleteProjectSecretResponse", []);
    }
    create(value?: PartialMessage<DeleteProjectSecretResponse>): DeleteProjectSecretResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteProjectSecretResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteProjectSecretResponse): DeleteProjectSecretResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteProjectSecretResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.DeleteProjectSecretResponse
 */
export const DeleteProjectSecretResponse = new DeleteProjectSecretResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProjectUser$Type extends MessageType<ProjectUser> {
    constructor() {
        super("demeter.ops.v1alpha.ProjectUser", [
            { no: 1, name: "project_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "role", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ProjectUser>): ProjectUser {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.projectId = "";
        message.userId = "";
        message.name = "";
        message.email = "";
        message.role = "";
        message.createdAt = "";
        if (value !== undefined)
            reflectionMergePartial<ProjectUser>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProjectUser): ProjectUser {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string project_id */ 1:
                    message.projectId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* string email */ 4:
                    message.email = reader.string();
                    break;
                case /* string role */ 5:
                    message.role = reader.string();
                    break;
                case /* string created_at */ 6:
                    message.createdAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProjectUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string project_id = 1; */
        if (message.projectId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.projectId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* string email = 4; */
        if (message.email !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.email);
        /* string role = 5; */
        if (message.role !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.role);
        /* string created_at = 6; */
        if (message.createdAt !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.createdAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.ProjectUser
 */
export const ProjectUser = new ProjectUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FetchProjectUsersRequest$Type extends MessageType<FetchProjectUsersRequest> {
    constructor() {
        super("demeter.ops.v1alpha.FetchProjectUsersRequest", [
            { no: 1, name: "project_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "page", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "page_size", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FetchProjectUsersRequest>): FetchProjectUsersRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.projectId = "";
        if (value !== undefined)
            reflectionMergePartial<FetchProjectUsersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FetchProjectUsersRequest): FetchProjectUsersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string project_id */ 1:
                    message.projectId = reader.string();
                    break;
                case /* optional uint32 page */ 2:
                    message.page = reader.uint32();
                    break;
                case /* optional uint32 page_size */ 3:
                    message.pageSize = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FetchProjectUsersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string project_id = 1; */
        if (message.projectId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.projectId);
        /* optional uint32 page = 2; */
        if (message.page !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.page);
        /* optional uint32 page_size = 3; */
        if (message.pageSize !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.pageSize);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.FetchProjectUsersRequest
 */
export const FetchProjectUsersRequest = new FetchProjectUsersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FetchProjectUsersResponse$Type extends MessageType<FetchProjectUsersResponse> {
    constructor() {
        super("demeter.ops.v1alpha.FetchProjectUsersResponse", [
            { no: 1, name: "records", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ProjectUser }
        ]);
    }
    create(value?: PartialMessage<FetchProjectUsersResponse>): FetchProjectUsersResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.records = [];
        if (value !== undefined)
            reflectionMergePartial<FetchProjectUsersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FetchProjectUsersResponse): FetchProjectUsersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated demeter.ops.v1alpha.ProjectUser records */ 1:
                    message.records.push(ProjectUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FetchProjectUsersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated demeter.ops.v1alpha.ProjectUser records = 1; */
        for (let i = 0; i < message.records.length; i++)
            ProjectUser.internalBinaryWrite(message.records[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.FetchProjectUsersResponse
 */
export const FetchProjectUsersResponse = new FetchProjectUsersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FetchMeProjectUserRequest$Type extends MessageType<FetchMeProjectUserRequest> {
    constructor() {
        super("demeter.ops.v1alpha.FetchMeProjectUserRequest", [
            { no: 1, name: "project_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FetchMeProjectUserRequest>): FetchMeProjectUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.projectId = "";
        if (value !== undefined)
            reflectionMergePartial<FetchMeProjectUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FetchMeProjectUserRequest): FetchMeProjectUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string project_id */ 1:
                    message.projectId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FetchMeProjectUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string project_id = 1; */
        if (message.projectId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.projectId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.FetchMeProjectUserRequest
 */
export const FetchMeProjectUserRequest = new FetchMeProjectUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FetchMeProjectUserResponse$Type extends MessageType<FetchMeProjectUserResponse> {
    constructor() {
        super("demeter.ops.v1alpha.FetchMeProjectUserResponse", [
            { no: 1, name: "records", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ProjectUser }
        ]);
    }
    create(value?: PartialMessage<FetchMeProjectUserResponse>): FetchMeProjectUserResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.records = [];
        if (value !== undefined)
            reflectionMergePartial<FetchMeProjectUserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FetchMeProjectUserResponse): FetchMeProjectUserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated demeter.ops.v1alpha.ProjectUser records */ 1:
                    message.records.push(ProjectUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FetchMeProjectUserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated demeter.ops.v1alpha.ProjectUser records = 1; */
        for (let i = 0; i < message.records.length; i++)
            ProjectUser.internalBinaryWrite(message.records[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.FetchMeProjectUserResponse
 */
export const FetchMeProjectUserResponse = new FetchMeProjectUserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteProjectUserRequest$Type extends MessageType<DeleteProjectUserRequest> {
    constructor() {
        super("demeter.ops.v1alpha.DeleteProjectUserRequest", [
            { no: 1, name: "project_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteProjectUserRequest>): DeleteProjectUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.projectId = "";
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteProjectUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteProjectUserRequest): DeleteProjectUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string project_id */ 1:
                    message.projectId = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteProjectUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string project_id = 1; */
        if (message.projectId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.projectId);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.DeleteProjectUserRequest
 */
export const DeleteProjectUserRequest = new DeleteProjectUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteProjectUserResponse$Type extends MessageType<DeleteProjectUserResponse> {
    constructor() {
        super("demeter.ops.v1alpha.DeleteProjectUserResponse", []);
    }
    create(value?: PartialMessage<DeleteProjectUserResponse>): DeleteProjectUserResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteProjectUserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteProjectUserResponse): DeleteProjectUserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteProjectUserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.DeleteProjectUserResponse
 */
export const DeleteProjectUserResponse = new DeleteProjectUserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProjectUserInvite$Type extends MessageType<ProjectUserInvite> {
    constructor() {
        super("demeter.ops.v1alpha.ProjectUserInvite", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "project_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "role", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "expires_in", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ProjectUserInvite>): ProjectUserInvite {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.projectId = "";
        message.email = "";
        message.role = "";
        message.status = "";
        message.expiresIn = "";
        message.createdAt = "";
        message.updatedAt = "";
        if (value !== undefined)
            reflectionMergePartial<ProjectUserInvite>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProjectUserInvite): ProjectUserInvite {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string project_id */ 2:
                    message.projectId = reader.string();
                    break;
                case /* string email */ 3:
                    message.email = reader.string();
                    break;
                case /* string role */ 4:
                    message.role = reader.string();
                    break;
                case /* string status */ 5:
                    message.status = reader.string();
                    break;
                case /* string expires_in */ 6:
                    message.expiresIn = reader.string();
                    break;
                case /* string created_at */ 7:
                    message.createdAt = reader.string();
                    break;
                case /* string updated_at */ 8:
                    message.updatedAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProjectUserInvite, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string project_id = 2; */
        if (message.projectId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.projectId);
        /* string email = 3; */
        if (message.email !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.email);
        /* string role = 4; */
        if (message.role !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.role);
        /* string status = 5; */
        if (message.status !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.status);
        /* string expires_in = 6; */
        if (message.expiresIn !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.expiresIn);
        /* string created_at = 7; */
        if (message.createdAt !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.createdAt);
        /* string updated_at = 8; */
        if (message.updatedAt !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.updatedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.ProjectUserInvite
 */
export const ProjectUserInvite = new ProjectUserInvite$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FetchProjectUserInvitesRequest$Type extends MessageType<FetchProjectUserInvitesRequest> {
    constructor() {
        super("demeter.ops.v1alpha.FetchProjectUserInvitesRequest", [
            { no: 1, name: "project_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "page", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "page_size", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FetchProjectUserInvitesRequest>): FetchProjectUserInvitesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.projectId = "";
        if (value !== undefined)
            reflectionMergePartial<FetchProjectUserInvitesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FetchProjectUserInvitesRequest): FetchProjectUserInvitesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string project_id */ 1:
                    message.projectId = reader.string();
                    break;
                case /* optional uint32 page */ 2:
                    message.page = reader.uint32();
                    break;
                case /* optional uint32 page_size */ 3:
                    message.pageSize = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FetchProjectUserInvitesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string project_id = 1; */
        if (message.projectId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.projectId);
        /* optional uint32 page = 2; */
        if (message.page !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.page);
        /* optional uint32 page_size = 3; */
        if (message.pageSize !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.pageSize);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.FetchProjectUserInvitesRequest
 */
export const FetchProjectUserInvitesRequest = new FetchProjectUserInvitesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FetchProjectUserInvitesResponse$Type extends MessageType<FetchProjectUserInvitesResponse> {
    constructor() {
        super("demeter.ops.v1alpha.FetchProjectUserInvitesResponse", [
            { no: 1, name: "records", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ProjectUserInvite }
        ]);
    }
    create(value?: PartialMessage<FetchProjectUserInvitesResponse>): FetchProjectUserInvitesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.records = [];
        if (value !== undefined)
            reflectionMergePartial<FetchProjectUserInvitesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FetchProjectUserInvitesResponse): FetchProjectUserInvitesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated demeter.ops.v1alpha.ProjectUserInvite records */ 1:
                    message.records.push(ProjectUserInvite.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FetchProjectUserInvitesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated demeter.ops.v1alpha.ProjectUserInvite records = 1; */
        for (let i = 0; i < message.records.length; i++)
            ProjectUserInvite.internalBinaryWrite(message.records[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.FetchProjectUserInvitesResponse
 */
export const FetchProjectUserInvitesResponse = new FetchProjectUserInvitesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateProjectUserInviteRequest$Type extends MessageType<CreateProjectUserInviteRequest> {
    constructor() {
        super("demeter.ops.v1alpha.CreateProjectUserInviteRequest", [
            { no: 1, name: "project_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "role", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateProjectUserInviteRequest>): CreateProjectUserInviteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.projectId = "";
        message.email = "";
        message.role = "";
        if (value !== undefined)
            reflectionMergePartial<CreateProjectUserInviteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateProjectUserInviteRequest): CreateProjectUserInviteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string project_id */ 1:
                    message.projectId = reader.string();
                    break;
                case /* string email */ 2:
                    message.email = reader.string();
                    break;
                case /* string role */ 3:
                    message.role = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateProjectUserInviteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string project_id = 1; */
        if (message.projectId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.projectId);
        /* string email = 2; */
        if (message.email !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.email);
        /* string role = 3; */
        if (message.role !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.role);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.CreateProjectUserInviteRequest
 */
export const CreateProjectUserInviteRequest = new CreateProjectUserInviteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateProjectUserInviteResponse$Type extends MessageType<CreateProjectUserInviteResponse> {
    constructor() {
        super("demeter.ops.v1alpha.CreateProjectUserInviteResponse", []);
    }
    create(value?: PartialMessage<CreateProjectUserInviteResponse>): CreateProjectUserInviteResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateProjectUserInviteResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateProjectUserInviteResponse): CreateProjectUserInviteResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateProjectUserInviteResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.CreateProjectUserInviteResponse
 */
export const CreateProjectUserInviteResponse = new CreateProjectUserInviteResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AcceptProjectUserInviteRequest$Type extends MessageType<AcceptProjectUserInviteRequest> {
    constructor() {
        super("demeter.ops.v1alpha.AcceptProjectUserInviteRequest", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AcceptProjectUserInviteRequest>): AcceptProjectUserInviteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        if (value !== undefined)
            reflectionMergePartial<AcceptProjectUserInviteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AcceptProjectUserInviteRequest): AcceptProjectUserInviteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AcceptProjectUserInviteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.AcceptProjectUserInviteRequest
 */
export const AcceptProjectUserInviteRequest = new AcceptProjectUserInviteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AcceptProjectUserInviteResponse$Type extends MessageType<AcceptProjectUserInviteResponse> {
    constructor() {
        super("demeter.ops.v1alpha.AcceptProjectUserInviteResponse", []);
    }
    create(value?: PartialMessage<AcceptProjectUserInviteResponse>): AcceptProjectUserInviteResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AcceptProjectUserInviteResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AcceptProjectUserInviteResponse): AcceptProjectUserInviteResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AcceptProjectUserInviteResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.AcceptProjectUserInviteResponse
 */
export const AcceptProjectUserInviteResponse = new AcceptProjectUserInviteResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResendProjectUserInviteRequest$Type extends MessageType<ResendProjectUserInviteRequest> {
    constructor() {
        super("demeter.ops.v1alpha.ResendProjectUserInviteRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResendProjectUserInviteRequest>): ResendProjectUserInviteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<ResendProjectUserInviteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResendProjectUserInviteRequest): ResendProjectUserInviteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResendProjectUserInviteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.ResendProjectUserInviteRequest
 */
export const ResendProjectUserInviteRequest = new ResendProjectUserInviteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResendProjectUserInviteResponse$Type extends MessageType<ResendProjectUserInviteResponse> {
    constructor() {
        super("demeter.ops.v1alpha.ResendProjectUserInviteResponse", []);
    }
    create(value?: PartialMessage<ResendProjectUserInviteResponse>): ResendProjectUserInviteResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResendProjectUserInviteResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResendProjectUserInviteResponse): ResendProjectUserInviteResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResendProjectUserInviteResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.ResendProjectUserInviteResponse
 */
export const ResendProjectUserInviteResponse = new ResendProjectUserInviteResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteProjectUserInviteRequest$Type extends MessageType<DeleteProjectUserInviteRequest> {
    constructor() {
        super("demeter.ops.v1alpha.DeleteProjectUserInviteRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteProjectUserInviteRequest>): DeleteProjectUserInviteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteProjectUserInviteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteProjectUserInviteRequest): DeleteProjectUserInviteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteProjectUserInviteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.DeleteProjectUserInviteRequest
 */
export const DeleteProjectUserInviteRequest = new DeleteProjectUserInviteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteProjectUserInviteResponse$Type extends MessageType<DeleteProjectUserInviteResponse> {
    constructor() {
        super("demeter.ops.v1alpha.DeleteProjectUserInviteResponse", []);
    }
    create(value?: PartialMessage<DeleteProjectUserInviteResponse>): DeleteProjectUserInviteResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteProjectUserInviteResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteProjectUserInviteResponse): DeleteProjectUserInviteResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteProjectUserInviteResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demeter.ops.v1alpha.DeleteProjectUserInviteResponse
 */
export const DeleteProjectUserInviteResponse = new DeleteProjectUserInviteResponse$Type();
/**
 * @generated ServiceType for protobuf service demeter.ops.v1alpha.ProjectService
 */
export const ProjectService = new ServiceType("demeter.ops.v1alpha.ProjectService", [
    { name: "FetchProjects", options: {}, I: FetchProjectsRequest, O: FetchProjectsResponse },
    { name: "FetchProjectById", options: {}, I: FetchProjectByIdRequest, O: FetchProjectByIdResponse },
    { name: "FetchProjectByNamespace", options: {}, I: FetchProjectByNamespaceRequest, O: FetchProjectByNamespaceResponse },
    { name: "CreateProject", options: {}, I: CreateProjectRequest, O: CreateProjectResponse },
    { name: "UpdateProject", options: {}, I: UpdateProjectRequest, O: UpdateProjectResponse },
    { name: "DeleteProject", options: {}, I: DeleteProjectRequest, O: DeleteProjectResponse },
    { name: "FetchProjectSecrets", options: {}, I: FetchProjectSecretsRequest, O: FetchProjectSecretsResponse },
    { name: "CreateProjectSecret", options: {}, I: CreateProjectSecretRequest, O: CreateProjectSecretResponse },
    { name: "DeleteProjectSecret", options: {}, I: DeleteProjectSecretRequest, O: DeleteProjectSecretResponse },
    { name: "FetchProjectUsers", options: {}, I: FetchProjectUsersRequest, O: FetchProjectUsersResponse },
    { name: "FetchMeProjectUser", options: {}, I: FetchMeProjectUserRequest, O: FetchMeProjectUserResponse },
    { name: "DeleteProjectUser", options: {}, I: DeleteProjectUserRequest, O: DeleteProjectUserResponse },
    { name: "FetchProjectUserInvites", options: {}, I: FetchProjectUserInvitesRequest, O: FetchProjectUserInvitesResponse },
    { name: "CreateProjectUserInvite", options: {}, I: CreateProjectUserInviteRequest, O: CreateProjectUserInviteResponse },
    { name: "AcceptProjectUserInvite", options: {}, I: AcceptProjectUserInviteRequest, O: AcceptProjectUserInviteResponse },
    { name: "ResendProjectUserInvite", options: {}, I: ResendProjectUserInviteRequest, O: ResendProjectUserInviteResponse },
    { name: "DeleteProjectUserInvite", options: {}, I: DeleteProjectUserInviteRequest, O: DeleteProjectUserInviteResponse }
]);
